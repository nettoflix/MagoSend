#include "CMagoDBCommandsThread.h"
#include "CSendOptionsForm.h"
#include "ui_CSendOptionsForm.h"
#include "CHostControl.h"
CSendOptionsForm::CSendOptionsForm(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::CSendOptionsForm)
{
    ui->setupUi(this);
    //	db = new MagoDB();
    bool alwaysWarnFile = CMagoDBCommandsThread::commands->warningWhenOverwriteFile();
    bool alwaysWarnId =  CMagoDBCommandsThread::commands->warningWhenOverwriteId();

    ui->comboBox_sessions->clear();
    QStringList sessions = CMagoDBCommandsThread::commands->queuedGetSessionNames();
    ui->comboBox_sessions->addItems(sessions);
    ui->checkBox_arquivo->setChecked(alwaysWarnFile);
    ui->checkBox_id->setChecked(alwaysWarnId);
    //
    bool shouldAutoConnect = CMagoDBCommandsThread::commands->shoudAutoConnectSession();
    ui->checkBox_connectAuto->setChecked(shouldAutoConnect);

    QString sessionToConnect = CMagoDBCommandsThread::commands->getSessionToConnect();
    for(int i=0; i<sessions.size(); i++)
    {
        if(sessionToConnect == sessions.at(i))
        {
            ui->comboBox_sessions->setCurrentIndex(i);
            break;
        }
    }
    bool updateIdForAllItems = CMagoDBCommandsThread::commands->getMagoDB()->shouldUpdateIdForAllItems();
    ui->checkBox_updateIdForAllItems->setChecked(updateIdForAllItems);

    bool useModalidadeLogica = CMagoDBCommandsThread::commands->getMagoDB()->shouldUseModalidadeLogica();
    ui->checkbox_usarModalidadeLogica->setChecked(useModalidadeLogica);
    if(useModalidadeLogica)
    {

        ui->checkBox_usarSubpastaComoPrefixo->setEnabled(false);
    }
    bool useModalidadePrefix = CMagoDBCommandsThread::commands->getMagoDB()->shouldUseModalidadePrefix();
    ui->checkBox_usarSubpastaComoPrefixo->setChecked(useModalidadePrefix);

    QString magoMediasPath = CMagoDBCommandsThread::commands->getMagoDB()->getMagoMediasPath();
    ui->te_magoMediasPath->setText(magoMediasPath);

    int port_start = CMagoDBCommandsThread::commands->getMagoDB()->getPortStart();
    ui->spin_porta->setValue(port_start);


}

CSendOptionsForm::~CSendOptionsForm()
{
    //	delete db;
    delete ui;
}

void CSendOptionsForm::closeEvent(QCloseEvent *event)
{
    qDebug("fechoU!");
    CMagoDBCommandsThread::commands->updateSendOptions(ui->checkBox_arquivo->isChecked(),ui->checkBox_id->isChecked());
    CMagoDBCommandsThread::commands->updateCheckBoxAutoConnectSession(ui->checkBox_connectAuto->isChecked());
    QString chosenSession = ui->comboBox_sessions->currentText();
    CMagoDBCommandsThread::commands->updateAutoConnectSession(chosenSession);
    CMagoDBCommandsThread::commands->updateShouldUpdateIdForAllItems(ui->checkBox_updateIdForAllItems->isChecked());
    CMagoDBCommandsThread::commands->updateShouldUseModalidadeLogica(ui->checkbox_usarModalidadeLogica->isChecked());
    CMagoDBCommandsThread::commands->updateShouldUseModalidadePrefix(ui->checkBox_usarSubpastaComoPrefixo->isChecked());
    CMagoDBCommandsThread::commands->updateMagoMediasPath(ui->te_magoMediasPath->toPlainText());
    CMagoDBCommandsThread::commands->updatePortStart(ui->spin_porta->value());

    CHostControl::usarModalidadeLogica = ui->checkbox_usarModalidadeLogica->isChecked();
    CHostControl::repeatSubFolderAsPrefix = ui->checkBox_usarSubpastaComoPrefixo->isChecked();
    CHostControl::magoMediaPath = ui->te_magoMediasPath->toPlainText();
    this->accept();
}


void CSendOptionsForm::on_checkbox_usarModalidadeLogica_stateChanged(int arg1)
{
    qDebug("arg [%d]", arg1);
    if(arg1 == 2)
    {
        ui->checkBox_usarSubpastaComoPrefixo->setEnabled(false);
    }
    else
    {
        ui->checkBox_usarSubpastaComoPrefixo->setEnabled(true);
    }

}
